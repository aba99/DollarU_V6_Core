package com.orsyp.client.amex;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import au.com.bytecode.opencsv.CSVReader;

import com.orsyp.tools.ps.Connector;





public class FileWatcher {

	private static HashMap<String,ArrayList<String>> reference = new HashMap<String,ArrayList<String>>();

	
	public static void main(String[] args) throws Exception  
	{		

		String refFile = args[0];
		String configFile = args[1];
		String path = args[2];
		
		
		readReferenceFile(refFile);
		
		Connector conn = new Connector(configFile,true,"CABRIN_",false,"",false,"");

		
		System.out.println("Scanning following path '"+path+"'");
		final File folder = new File(path);

		ArrayList<String> currentFiles = listFilesForFolder(folder);
		
		
		

	}
	public static ArrayList<String> listFilesForFolder(final File folder) {
		ArrayList<String> currentFiles= new ArrayList<String>();
		
	    for (final File fileEntry : folder.listFiles()) {
	        if (fileEntry.isDirectory()) {
	            listFilesForFolder(fileEntry);
	        } else {
	            currentFiles.add(fileEntry.getName());
	        }
	    }
	    
	    return currentFiles;
	}
	
	public static void readReferenceFile(String fileName) throws IOException
	{
		 @SuppressWarnings("resource")
		CSVReader reader = new CSVReader(new FileReader(fileName),',', '\"', '\0');
			
			String [] line;			

			//parse lines
			while ((line = reader.readNext()) != null) 
		    {	    	
				
		        if(line.length>1)
		        {
		        	String key=line[0];
		        	String value=line[1];
		        
		        	
		        	if(!reference.containsKey(key))
		        	{
		        		ArrayList<String> placer = new ArrayList<String>();
		        		placer.add(value);
		        		reference.put(key, placer);
		        	}
		        	else
		        	{
		        		if(!reference.get(key).contains(value))
		        		{
		        			reference.get(key).add(value);
		        		}
		        	}
		        		
		        }
		    }	
	}


	
}
