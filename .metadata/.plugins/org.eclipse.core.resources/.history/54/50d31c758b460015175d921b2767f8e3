package com.orsyp.client.amex;

import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.util.ArrayList;
import java.util.HashMap;

import au.com.bytecode.opencsv.CSVReader;


public class FileWatcherDispatcher {

	public static HashMap<String,ArrayList<String>> reference = new HashMap<String,ArrayList<String>>();
	
	public static void main(String[] args) throws IOException,
	InterruptedException  {		

			Path faxFolder = Paths.get("C:\\tmp");
			WatchService watchService = FileSystems.getDefault().newWatchService();
			faxFolder.register(watchService, StandardWatchEventKinds.ENTRY_CREATE);

			boolean valid = true;
			do {
				WatchKey watchKey = watchService.take();

				for (WatchEvent event : watchKey.pollEvents()) {
					WatchEvent.Kind kind = event.kind();
					if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {
						String fileName = event.context().toString();
						System.out.println("File Created:" + fileName);
					}
				}
				valid = watchKey.reset();

			} while (valid);

		}

	public void readReferenceFile(String fileName) throws IOException
	{
		 CSVReader reader = new CSVReader(new FileReader(fileName),',', '\"', '\0');
			
			String [] line;			

			//parse lines
			while ((line = reader.readNext()) != null) 
		    {	    	
				
		        if(line.length>1)
		        {
		        	String key=line[0];
		        	String value=line[1];
		        
		        	
		        	if(!reference.containsKey(key))
		        	{
		        		ArrayList<String> placer = new ArrayList<String>();
		        		placer.add(value);
		        		reference.put(key, placer);
		        	}
		        	else
		        	{
		        		if(!reference.get(key).contains(value))
		        		{
		        			reference.get(key).add(value);
		        		}
		        	}
		        		
		        }
		    }	
	}

}
